---
title: "Modul Diskusi 3: Git & GitHub - Senjata Rahasia Saintis Data"
subtitle: "Dari Proyek Kuliah yang Kacau, Kolaborasi Tim, hingga Dilirik Perusahaan"
author: "Tim Asisten Lab Matematika UI"
date: "2025-10-01"
image: "https://res.cloudinary.com/tahun2025/image/upload/f_auto,q_auto,w_800/v1/2024/psd/git_github_workflow.png"
---

<a href="../ksd2025.qmd" class="btn btn-outline-primary mb-4">
<i class="fa-solid fa-arrow-left"></i> Kembali ke Arsip Praktikum KSD
</a>

## Pembukaan: Dua Skenario Mahasiswa

Bayangkan dua skenario pengumpulan tugas akhir analisis data.

* **Mahasiswa A** mengirim email ke dosen dengan lampiran `ProyekAnalisis_FINAL_Bismillah_Lulus_v3_Revisi_FIX.zip`.
* **Mahasiswa B** mengirim satu link ke repositori GitHub-nya. Di dalamnya, ada file `README.md` yang menjelaskan proyek, kode yang rapi, serta riwayat *commit* yang menunjukkan proses pengerjaannya secara bertahap.

Menurut Anda, siapa yang terlihat lebih profesional dan siap kerja? Modul ini adalah tentang menjadi **Mahasiswa B**.

---

## Bagian 1: Mengapa Git/GitHub Wajib Dikuasai? (Manfaat Langsung untuk Anda)

Sebelum kita menyentuh perintah teknis, mari kita pahami *mengapa* alat ini akan mengubah cara Anda bekerja selamanya.

### 1.1. Menjadi "Mesin Waktu" untuk Kode Anda (Anti-Panik & Anti-Stres)
* **Masalah:** Anda mengubah puluhan baris kode, dan tiba-tiba semuanya rusak. Anda tidak ingat apa saja yang diubah dan berharap bisa kembali ke versi 1 jam yang lalu saat semuanya masih berjalan.
* **Solusi Git:** Git adalah tombol "Undo" tanpa batas untuk seluruh proyek Anda. Setiap *commit* adalah sebuah *snapshot* atau "foto" dari pekerjaan Anda yang bisa Anda kunjungi kembali kapan saja. Ini memberi Anda **kebebasan untuk bereksperimen** tanpa rasa takut merusak kode yang sudah berhasil.

### 1.2. Kunci Kerja Kelompok Anti-Ribet (Kolaborasi Efektif)
* **Masalah:** Kerja kelompok sering kacau. Anggota tim saling mengirim file `.py` atau `.ipynb` via WhatsApp. Bingung mana versi terbaru. Pekerjaan teman secara tidak sengaja menimpa pekerjaan Anda.
* **Solusi GitHub:** GitHub memungkinkan setiap anggota tim bekerja di **"cabang" (*branch*)** paralelnya sendiri. Anda bisa mengerjakan fitur A sementara teman Anda mengerjakan fitur B, tanpa saling mengganggu. Proses ***Pull Request*** memastikan semua pekerjaan direview bersama sebelum digabungkan. Tidak ada lagi pertanyaan, "Eh, file mana yang paling *update*?"

### 1.3. Membangun Portofolio Profesional (Dilirik Rekruter)
* **Masalah:** Bagaimana cara membuktikan kepada perusahaan bahwa Anda benar-benar bisa *coding* dan menganalisis data?
* **Solusi GitHub:** Profil GitHub Anda adalah **CV dinamis** Anda. Rekruter bisa langsung melihat proyek-proyek yang pernah Anda kerjakan, cara Anda menulis kode, dan cara Anda berpikir melalui riwayat *commit*. Ini adalah cara paling ampuh untuk **menunjukkan *skill*, bukan hanya menceritakannya di CV**.

### 1.4. Jendela untuk Belajar dari Seluruh Dunia (Sumber Ilmu Tanpa Batas)
* **Masalah:** Bagaimana cara belajar dari kode yang ditulis oleh para ahli di Google, Meta, atau bahkan dari *library* `xgboost`?
* **Solusi GitHub:** Hampir semua proyek *open-source* besar ada di GitHub. Anda bisa "membedah" kode mereka, melihat bagaimana sebuah fitur dibangun dari *commit* ke *commit*, membaca diskusi di *Issues*, dan belajar dari alur kerja para profesional.

---

## Bagian 2: Bagaimana Cara Kerjanya? (Model Mental & Perintah Kunci)

Sekarang setelah Anda termotivasi, mari kita pahami konsep dasarnya.

### 2.1. Analogi "Sesi Foto": Tiga Area Kerja Git
* **Working Directory (Studio Foto):** Folder proyek di laptop Anda. Di sinilah Anda menata properti dan model (menulis dan mengedit kode).
* **Staging Area (Seleksi Foto - `git add`):** Setelah menata, Anda memilih pose mana yang paling bagus untuk dicetak. Dengan `git add nama_file`, Anda memberitahu Git, "Oke, perubahan di file ini sudah bagus, siapkan untuk dicatat."
* **Repository (Album Foto - `git commit`):** Ini adalah tindakan "mengambil foto". Anda menyimpan *snapshot* dari semua file di *staging area* ke dalam "album" sejarah proyek Anda. Setiap *commit* wajib disertai pesan (`-m "pesan commit"`) yang berfungsi sebagai *caption* foto.

### 2.2. Alur Kerja Esensial (Walkthrough Praktis)

**Alur Kerja Solo:**
1.  `git init`: Memulai "album foto" di sebuah proyek baru.
2.  `git add nama_file.py`: Menambahkan file ke *staging area*.
3.  `git commit -m "Feat: Menambahkan fungsi analisis awal"`: Menyimpan perubahan ke repositori lokal.
4.  `git push origin main`: Mengunggah "album" Anda ke "galeri online" di GitHub.

**Alur Kerja Kolaboratif:**
1.  `git branch fitur-visualisasi`: Membuat "dunia paralel" baru untuk mengerjakan fitur visualisasi.
2.  `git checkout fitur-visualisasi`: Pindah ke "dunia paralel" tersebut.
3.  Lakukan `add` dan `commit` seperti biasa di *branch* ini.
4.  Setelah selesai, kembali ke *branch* utama (`git checkout main`).
5.  `git merge fitur-visualisasi`: Menggabungkan pekerjaan dari "dunia paralel" ke garis waktu utama.
6.  Di GitHub, proses ini biasanya dilakukan melalui **Pull Request** untuk memungkinkan *review* kode oleh tim.

---

## Poin Diskusi & Studi Kasus

:::{.callout-note icon="true"}
### Kasus untuk Diskusi
Anda dan dua teman sekelas mengerjakan proyek analisis data bersama dalam satu *notebook* `analisis.ipynb`. Anda bertugas membersihkan data, teman A bertugas membuat model, dan teman B bertugas membuat visualisasi.

Jelaskan alur kerja Git & GitHub yang akan Anda usulkan kepada tim. Bagaimana Anda akan menggunakan ***branch*** untuk mengelola pekerjaan masing-masing agar tidak terjadi konflik? Di platform mana (Git/GitHub) Anda akan melakukan ***review* kode** sebelum menggabungkannya ke *branch* utama?
:::

---

## Bagian 4: Praktik Terbaik untuk Portofolio yang Mengesankan

* **4.1. README.md adalah Segalanya:** README adalah etalase proyek Anda. Isinya minimal harus mencakup:
    * **Deskripsi Proyek:** Apa masalah yang diselesaikan?
    * **Cara Instalasi:** Bagaimana orang lain bisa menjalankan kode Anda (`pip install -r requirements.txt`).
    * **Contoh Penggunaan:** Cuplikan kode atau gambar hasil akhir.
* **4.2. *Commit Message* yang Profesional:** Tulis pesan yang jelas dan informatif.
    * **Buruk:** `git commit -m "update"`
    * **Baik:** `git commit -m "Feat: Add function to calculate monthly revenue"`
* **4.3. Pin Repositori Terbaik Anda:** Di halaman profil GitHub Anda, gunakan fitur "Pin" untuk menyorot 6 proyek terbaik yang paling Anda banggakan.

---

## Penutup & Jembatan ke Modul Berikutnya

Anda sekarang memahami bahwa Git/GitHub lebih dari sekadar *backup*. Ini adalah alat fundamental untuk kolaborasi, *reproducibility*, dan membangun reputasi profesional Anda sebagai seorang praktisi data.

Dengan lingkungan kerja yang rapi (Conda) dan alur kerja yang terstruktur (Git), kita siap untuk berinteraksi dengan ekosistem AI/ML yang lebih luas. Di **Modul Diskusi 4**, kita akan menjelajahi **Hugging Face**, "GitHub"-nya model-model *Machine Learning*.
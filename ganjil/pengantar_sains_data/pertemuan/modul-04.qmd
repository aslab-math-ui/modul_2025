---
title: "Modul 4: R - Library and Project Management"
subtitle: "Studi Kasus: Big Project"
author: "Tim Asisten Lab Matematika UI"
date: "2025-10-02"
image: "https://raw.githubusercontent.com/aslab-math-ui/asset/main/pengantar_sains_data/static/thumbnail-psd-modul-4.webp"
---

<a href="../psd2025.qmd" class="btn btn-outline-primary mb-4">
<i class="fa-solid fa-arrow-left"></i> Kembali ke Arsip Praktikum PSD 2025
</a>

## Tujuan Pembelajaran

Setelah menyelesaikan modul ini, mahasiswa diharapkan mampu:

<!-- Gw sedikit melakukan penyesuaian urutan modul ya -->

* **1. Mengelola Alur Kerja dengan RStudio Projects**
    * Memahami pentingnya menggunakan project untuk menjaga keteraturan dan reproduktifitas.
    * Membuat sebuah project baru di RStudio.
    * Mengorganisir file skrip dan data dalam direktori project.

* **2. Mengenali Tipe Objek Dasar di R**
    * Membuat dan memanipulasi objek dasar seperti *atomic vector*.
    * Memahami struktur objek yang lebih kompleks seperti *list* dan *data frame*.
    * Memeriksa tipe dan struktur dari sebuah objek R menggunakan `str()`.

* **3. Memahami dan Mengelola R Packages**
    * Memahami fungsi *packages* sebagai ekstensi fungsionalitas R.
    * Menginstal *package* baru dari CRAN.
    * Memuat *package* ke dalam sesi R untuk digunakan.
    * Mengakses dokumentasi dan halaman bantuan untuk fungsi dalam sebuah *package*.


---

## Skenario: Proyek Perdana 🧑‍🔬

Selamat datang di proyek pertama Anda!

Bayangkan Anda baru saja bergabung sebagai analis data di sebuah perusahaan analitik game. Manajer Anda langsung memberikan sebuah tantangan besar yang diberi nama **"Big Project"**. Tugas Anda adalah membangun sebuah sistem untuk menganalisis probabilitas dalam permainan kartu, menggunakan data mentah dari puluhan ribu permainan.

Manajer Anda menekankan dua hal:

<!-- Untuk Quarto Markdown saat kita ingin ordered list kita harus beri jarak satu line -->
1. **Keteraturan adalah Kunci:** Proyek ini akan berjalan lama dan melibatkan banyak file: skrip, set data, dan visualisasi. Kesalahan terbesar yang sering dilakukan analis junior adalah bekerja secara berantakan. Maka, tugas pertama Anda adalah membangun ***fondasi*** atau **'garasi' kerja** yang rapi agar proyek ini terorganisir.
2. **Gunakan Alat yang Tepat:** R yang Anda pasang sekarang itu ibarat mobil standar dari pabrik. Kemampuannya bagus, tapi terbatas. Untuk tugas analisis data modern yang kompleks, Anda butuh *power tools*—alat-alat khusus yang lebih canggih untuk memanipulasi dan memvisualisasikan data secara efisien.

Tugas kita dalam modul ini adalah mensimulasikan dan menyelesaikan dua persiapan fundamental tersebut. Kita akan belajar cara memasang *power tools* yang disebut *Packages* untuk meningkatkan kemampuan R kita secara drastis.

## 1. RStudio Projects: Membangun 'Garasi' Kerja

Setiap proyek analisis data yang serius harus dimulai dengan membuat "rumah"-nya sendiri. Di RStudio, rumah ini disebut **Project**. Ini memastikan semua file kita (skrip, data, dan hasil) berada di satu tempat yang aman dan terorganisir.

Sebuah project membuat pekerjaan Anda:
<!-- Untuk Unordered list juga berikan jarak satu line -->

* Self-contained: Semua yang dibutuhkan ada di dalam satu folder.
* Portable: Mudah dipindahkan ke komputer lain tanpa merusak path file.
* Reproducible: Orang lain (atau Anda di masa depan) bisa menjalankan ulang analisis Anda dengan mudah.

### Studi Kasus: Membuat Garasi untuk "Big Project" Kartu

Mari kita ikuti langkah-langkah berikut untuk membuat 'garasi' resmi bagi proyek analisis kartu kita.

1. Buat Project Baru: Di RStudio, `klik File > New Project....` Pilih `New Directory`, lalu `New Project`. Beri nama direktori, misalnya `Proyek_Analisis_Kartu`, dan klik `Create Project`.

2. Masuk ke Garasi Baru: RStudio akan me-restart. Perhatikan bahwa sekarang direktori kerja Anda sudah otomatis mengarah ke folder proyek yang baru saja dibuat.

3. Buat Skrip R Baru: Klik `File > New File > R Script`. Di dalam skrip ini, ketikkan kode yang kita buat di Bagian 2 untuk membuat `data frame` deck.

```{r filename='R'}
# Skrip untuk membangun data deck kartu
face <- c("king", "queen", "jack", "ten")
suit <- c("spades", "spades", "spades", "spades")
value <- c(13, 12, 11, 10)

deck <- data.frame(face, suit, value)
```

4. Simpan Skrip: Tekan `Ctrl + S` (atau `Cmd + S`) dan beri nama file, misalnya `buat_deck.R`. File ini akan otomatis tersimpan di dalam 'garasi' proyek Anda.

Selesai! Sekarang "Big Project" kita memiliki rumahnya sendiri. Semua 'power tools' yang kita pasang dan 'bahan baku' yang kita siapkan akan tersimpan rapi di sini, siap untuk tahap analisis selanjutnya.


### 1.1 Memasang Package

Anda hanya perlu menginstal sebuah `package` satu kali. Kita akan coba menginstal `dplyr`, sebuah `package` yang sangat populer untuk manipulasi data. Buka RStudio Anda dan ketik di konsol:

<!-- 

Terkait agar code tetap berjalan, tapi tidak mengeluarkan output error atau tidak perlu gunakan opsi eksekusi ini ya:

#| eval: false
#| echo: true
#| output: false
#| warning: false
#| error: false

-->

```{r filename='R'}
#| eval: false
#| echo: true
#| output: false
#| warning: false
#| error: false
install.packages("dplyr")
```

### 1.2 Memuat Package

Setiap kali Anda memulai sesi R baru dan ingin menggunakan fungsi dari `dplyr`, Anda harus memuatnya terlebih dahulu dengan fungsi `library()`.

<!-- 

Begitu juga dengan activate library

#| eval: true
#| echo: true    # atau false, tergantung apakah ingin menampilkan kodenya
#| output: false
#| warning: false
#| error: false

-->

```{r filename='R'}
#| eval: true
#| echo: true
#| output: false
#| warning: false
#| error: false
library(dplyr)
```

### 1.3 Help

Bagaimana cara mengetahui fungsi apa saja yang ada di `dplyr` atau bagaimana cara menggunakannya? Gunakan tanda tanya `?`. Misalnya, kita ingin tahu cara kerja fungsi `mutate()` dari `dplyr`.

<!-- 

Terkait agar ketika di render tidak menyebabkan error chunk dan terbuka ke website kasih opsi eksekusi ini ya:

#| eval: false
#| echo: true
#| output: false

-->

```{r filename='R'}
#| eval: false
#| echo: true
#| output: false

?mutate
```

Perhatikan panel Help di RStudio, di sana akan muncul dokumentasi lengkapnya. Ini adalah keterampilan yang sangat penting.

---

## 2. Objek di R: Menyiapkan 'Bahan Baku'

<!-- zaki update ya agar lebih berisi -->

Setelah garasi siap, saatnya kita menyiapkan 'bahan baku' untuk diolah. Di R, semua data—dari angka tunggal hingga tabel kompleks—disimpan dalam wadah yang disebut **objek**. Memahami berbagai jenis 'bahan baku' ini adalah keterampilan fundamental yang membedakan analis data pemula dan profesional.

### 2.1. Atomic Vector: Bata Fondasi Proyek

Ini adalah tipe objek paling dasar, ibarat 'bata' atau 'sekrup' dalam proyek kita. *Atomic vector* adalah rangkaian nilai **dengan tipe yang sama**.

```{r filename='R'}
# Vector berisi angka
nilai_ujian <- c(85, 92, 78)

# Vector berisi teks
nama_mahasiswa <- c("Budi", "Ani", "Candra")
```
Rangkaian ini harus homogen. Anda tidak bisa mencampur teks dan angka dalam satu *atomic vector* tanpa R mengubah tipenya secara paksa (sebuah proses yang disebut *coercion*).

### 2.2. Enam Tipe Dasar Atomic Vector

Semua 'bata' di R memiliki material dasar. Ada enam tipe utama, namun empat di antaranya akan Anda gunakan 99% setiap saat.

::: {.panel-tabset}

#### `doubles` (Numeric)
Ini adalah tipe default untuk angka di R. Tipe ini bisa menampung angka desimal.

```{r filename='R'}
ipk <- c(3.55, 4.0, 2.89)
ipk
class(ipk) # class() memberitahu kita tipe objeknya
```

#### `integers` (Bilangan Bulat)
Jika Anda yakin hanya akan bekerja dengan bilangan bulat, Anda bisa membuatnya secara eksplisit dengan menambahkan `L` di belakang angka. Ini menghemat memori.

```{r filename='R'}
jumlah_sks <- c(24L, 21L, 18L)
jumlah_sks
class(jumlah_sks)
```

#### `characters` (Teks/String)
Untuk menyimpan data teks. Selalu diapit oleh tanda kutip `"` atau `'`.

```{r filename='R'}
mata_kuliah <- c("Kalkulus", "Aljabar Linear", "Statistika")
mata_kuliah
class(mata_kuliah)
```

#### `logicals` (Boolean)
Hanya bisa berisi tiga nilai: `TRUE`, `FALSE`, atau `NA` (Not Available/Missing). Sangat penting untuk operasi perbandingan dan filter.

```{r filename='R'}
lulus_ujian <- c(TRUE, TRUE, FALSE)
lulus_ujian
class(lulus_ujian)
```

:::

<!-- sebelumnya kan hanya sampai 2.2. Itu terlalu sedikit, jadi zaki tambahin lagi sampai 2.7 ya -->

### 2.3. Faktor: Mengelola Data Kategorikal

Dalam statistika, kita sering bekerja dengan variabel kategorikal (data yang nilainya terbatas pada beberapa level). Untuk **"Big Project"** kita, kolom `face` dan `suit` adalah contoh sempurna. Menyimpannya sebagai teks biasa itu kurang efisien. R punya tipe data khusus untuk ini: **Faktor**.

Faktor lebih pintar dari teks biasa karena R secara internal menyimpan "level" atau kategori yang mungkin ada. Ini sangat berguna untuk pemodelan dan visualisasi.

```{r filename='R'}
# Kita ubah vector 'face' dan 'suit' menjadi faktor
face_faktor <- factor(c("king", "queen", "jack", "ten"))
suit_faktor <- factor(c("spades", "spades", "spades", "spades"))

face_faktor
suit_faktor
```
Perhatikan outputnya! R memberitahu kita apa saja `Levels` yang ada di dalam faktor tersebut.

### 2.4. Data Frame: Blueprint Data Utama

Sekarang kita bisa membangun **Data Frame** kita dengan 'bahan baku' yang lebih baik. Data frame adalah objek 2D yang ajaib karena bisa menampung kolom dengan tipe yang berbeda-beda (numeric, character, factor, dll.).

Mari kita rakit `data frame` untuk proyek kartu kita menggunakan `character`, `factor`, dan `numeric`.

```{r filename='R'}
# Buat tiga vector terpisah sebagai 'bahan baku'
face <- c("king", "queen", "jack", "ten")
suit <- c("spades", "spades", "spades", "spades")
value <- c(13, 12, 11, 10)

# Gabungkan menjadi satu blueprint data frame
deck <- data.frame(
  face = factor(face), # Langsung diubah jadi faktor
  suit = factor(suit),
  value = value
)

deck
```

### 2.5. List: Kotak Perkakas Serbaguna

**Data frame** mengharuskan semua kolomnya punya panjang yang sama. Tapi bagaimana jika kita ingin menyimpan beberapa jenis objek (seperti data frame, beberapa catatan proyek, dan sebuah vector) dalam satu wadah tanpa aturan tersebut? Kita gunakan **list**.

Sebuah `list` adalah objek paling fleksibel, ibarat kotak perkakas yang bisa diisi apa saja.

```{r filename='R'}
# Membuat list untuk menyimpan data frame dan info proyek
proyek_kartu <- list(
  nama_proyek = "Analisis Kartu Big Project",
  penanggung_jawab = c("Budi", "Ani"),
  data_utama = deck,
  sudah_dimulai = TRUE
)

proyek_kartu
```

### 2.6. Mengakses Data di Dalam Objek (Indexing)

Menyimpan data itu satu hal, mengambilnya kembali adalah hal lain. Ini adalah keterampilan krusial. Ada tiga cara utama untuk "mencomot" data dari dalam objek:

::: {.panel-tabset}

#### `$` (Tanda Dolar)
Cara paling umum dan mudah dibaca untuk mengakses kolom dalam `data.frame` atau elemen dalam `list` yang memiliki nama.

```{r filename='R'}
# Mengambil kolom 'value' dari data frame 'deck'
deck$value

# Mengambil 'data_utama' dari list 'proyek_kartu'
proyek_kartu$data_utama
```

#### `[[...]]` (Kurung Siku Ganda)
Sangat berguna untuk mengambil satu elemen dari `list`. Anda bisa menggunakan nama (dengan kutip) atau nomor posisinya.

```{r filename='R'}
# Mengambil elemen kedua ('penanggung_jawab') dari list
proyek_kartu[[2]]

# Sama seperti proyek_kartu$nama_proyek
proyek_kartu[["nama_proyek"]]
```

#### `[...]` (Kurung Siku Tunggal)
Ini adalah alat paling serbaguna, digunakan untuk mengambil **satu atau lebih** elemen. Untuk data frame, formatnya adalah `[baris, kolom]`.

```{r filename='R'}
# Mengambil baris pertama dari data frame 'deck' (semua kolom)
deck[1, ]

# Mengambil kolom kedua dari data frame 'deck' (semua baris)
deck[, 2]

# Mengambil nilai pada baris ke-3, kolom ke-1
deck[3, 1]
```

:::

### 2.7. Inspeksi Objek Lanjutan

Setelah membuat dan memanipulasi objek, kita perlu cara cepat untuk memeriksanya. Berikut adalah tiga fungsi diagnostik yang akan Anda gunakan setiap hari.

::: {.panel-tabset}

#### `str()`
`str` (structure) adalah teman terbaik Anda. Fungsi ini memberikan diagnosis cepat tentang struktur internal sebuah objek.

```{r filename='R'}
str(deck)
str(proyek_kartu)
```
Perhatikan bagaimana `str()` dengan jelas menunjukkan mana kolom yang bertipe `Factor`, `numeric`, dll.

#### `summary()`
Memberikan ringkasan statistik untuk setiap kolom dalam data frame. Untuk kolom numerik, ia memberikan statistik deskriptif. Untuk kolom faktor, ia memberikan hitungan frekuensi.

```{r filename='R'}
summary(deck)
```

#### `head()` & `tail()`
Digunakan untuk "mengintip" beberapa baris pertama atau terakhir dari objek data Anda. Sangat berguna jika Anda bekerja dengan data yang sangat besar.

```{r filename='R'}
# Melihat 6 baris pertama
head(deck)

# Jika data kita besar, kita juga bisa melihat 6 baris terakhir
# tail(deck)
```

:::

---

<!-- Buat Kesimpulannya dalam list -->
### Kesimpulan

Luar biasa! Anda telah berhasil menyelesaikan tahap persiapan fundamental untuk "Big Project" Anda dengan alur kerja yang profesional. Anda kini tahu cara:

1.  **Membangun 'garasi' kerja** yang rapi dengan **RStudio Projects**.
2.  **Mengambil 'perkakas canggih'** (**Packages**) untuk mengolah bahan tersebut.
3.  **Menyiapkan dan memahami 'bahan baku'** (objek `vector`, `data.frame`, `list`) di dalamnya.

Dengan fondasi ini, Anda siap menghadapi tantangan analisis data yang lebih kompleks di modul-modul berikutnya.


## Latihan Mini-Project

Untuk menguji pemahaman Anda, selesaikan tantangan terintegrasi berikut:

1.  **Bangun Garasi Baru:** Buat sebuah **RStudio Project** baru bernama `Latihan_Modul_4`.
2.  **Siapkan Bahan Baku:** Di dalam project tersebut, buat sebuah R Script baru. Di dalam skrip itu, buat sebuah **list** bernama `proyek_pemain`. List ini harus berisi dua item:
    * `metadata`: Sebuah `character vector` berisi nama Anda dan tanggal hari ini.
    * `data_pemain`: Sebuah `data.frame` dengan 3 kolom: `nama` (3 nama fiktif), `id_pemain` (3 ID fiktif), dan `level` (misal: "Gold", "Silver", "Bronze").
    * Gunakan `str()` untuk menampilkan struktur dari list `proyek_pemain` tersebut.
3.  **Ambil Perkakas Visualisasi:**
    * **Instal** *package* `ggplot2` (jika Anda belum punya).
    * **Muat** *package* `ggplot2` menggunakan `library()`.
    * Gunakan `?ggplot` untuk membuka halaman bantuan dari fungsi utama *package* tersebut.

Simpan R skrip Anda. Jika Anda berhasil menyelesaikan semua langkah, Anda telah menguasai tiga pilar fundamental alur kerja analisis data di R!


---

<a href="../psd2025.qmd" class="btn btn-outline-primary mb-4">
<i class="fa-solid fa-arrow-left"></i> Kembali ke Arsip Praktikum PSD 2025
</a>